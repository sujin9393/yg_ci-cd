name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  push:
    tags:
      - "v*"

env:
  IMAGE_NAME: sally2020s/yg-fe
  WORKDIR: ./frontend
  CONTAINER_NAME: myfrontend

jobs:
  ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKDIR }}

      - name: Run Lint
        run: npm run lint
        working-directory: ${{ env.WORKDIR }}

      - name: Run Unit Tests + Coverage
        run: npm run test -- --coverage
        working-directory: ${{ env.WORKDIR }}

  cd:
    name: Frontend CD
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKDIR }}

      - name: Build frontend (Vite)
        run: npm run build
        working-directory: ${{ env.WORKDIR }}

      - name: DockerHub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKDIR }}
          file: ${{ env.WORKDIR }}/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest

      - name: SSH Deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.FE_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ env.IMAGE_NAME }}:latest
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker run -d -p 3000:80 --name ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }}:latest